
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Lotto` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Lotto
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 */
export type LottoModel = runtime.Types.Result.DefaultSelection<Prisma.$LottoPayload>

export type AggregateLotto = {
  _count: LottoCountAggregateOutputType | null
  _avg: LottoAvgAggregateOutputType | null
  _sum: LottoSumAggregateOutputType | null
  _min: LottoMinAggregateOutputType | null
  _max: LottoMaxAggregateOutputType | null
}

export type LottoAvgAggregateOutputType = {
  id: number | null
  num1: number | null
  num2: number | null
  num3: number | null
  num4: number | null
  num5: number | null
  num6: number | null
  bonus: number | null
}

export type LottoSumAggregateOutputType = {
  id: number | null
  num1: number | null
  num2: number | null
  num3: number | null
  num4: number | null
  num5: number | null
  num6: number | null
  bonus: number | null
}

export type LottoMinAggregateOutputType = {
  id: number | null
  date: Date | null
  num1: number | null
  num2: number | null
  num3: number | null
  num4: number | null
  num5: number | null
  num6: number | null
  bonus: number | null
}

export type LottoMaxAggregateOutputType = {
  id: number | null
  date: Date | null
  num1: number | null
  num2: number | null
  num3: number | null
  num4: number | null
  num5: number | null
  num6: number | null
  bonus: number | null
}

export type LottoCountAggregateOutputType = {
  id: number
  date: number
  num1: number
  num2: number
  num3: number
  num4: number
  num5: number
  num6: number
  bonus: number
  _all: number
}


export type LottoAvgAggregateInputType = {
  id?: true
  num1?: true
  num2?: true
  num3?: true
  num4?: true
  num5?: true
  num6?: true
  bonus?: true
}

export type LottoSumAggregateInputType = {
  id?: true
  num1?: true
  num2?: true
  num3?: true
  num4?: true
  num5?: true
  num6?: true
  bonus?: true
}

export type LottoMinAggregateInputType = {
  id?: true
  date?: true
  num1?: true
  num2?: true
  num3?: true
  num4?: true
  num5?: true
  num6?: true
  bonus?: true
}

export type LottoMaxAggregateInputType = {
  id?: true
  date?: true
  num1?: true
  num2?: true
  num3?: true
  num4?: true
  num5?: true
  num6?: true
  bonus?: true
}

export type LottoCountAggregateInputType = {
  id?: true
  date?: true
  num1?: true
  num2?: true
  num3?: true
  num4?: true
  num5?: true
  num6?: true
  bonus?: true
  _all?: true
}

export type LottoAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Lotto to aggregate.
   */
  where?: Prisma.LottoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Lottos to fetch.
   */
  orderBy?: Prisma.LottoOrderByWithRelationInput | Prisma.LottoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.LottoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Lottos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Lottos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Lottos
  **/
  _count?: true | LottoCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: LottoAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: LottoSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: LottoMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: LottoMaxAggregateInputType
}

export type GetLottoAggregateType<T extends LottoAggregateArgs> = {
      [P in keyof T & keyof AggregateLotto]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateLotto[P]>
    : Prisma.GetScalarType<T[P], AggregateLotto[P]>
}




export type LottoGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.LottoWhereInput
  orderBy?: Prisma.LottoOrderByWithAggregationInput | Prisma.LottoOrderByWithAggregationInput[]
  by: Prisma.LottoScalarFieldEnum[] | Prisma.LottoScalarFieldEnum
  having?: Prisma.LottoScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: LottoCountAggregateInputType | true
  _avg?: LottoAvgAggregateInputType
  _sum?: LottoSumAggregateInputType
  _min?: LottoMinAggregateInputType
  _max?: LottoMaxAggregateInputType
}

export type LottoGroupByOutputType = {
  id: number
  date: Date
  num1: number
  num2: number
  num3: number
  num4: number
  num5: number
  num6: number
  bonus: number
  _count: LottoCountAggregateOutputType | null
  _avg: LottoAvgAggregateOutputType | null
  _sum: LottoSumAggregateOutputType | null
  _min: LottoMinAggregateOutputType | null
  _max: LottoMaxAggregateOutputType | null
}

type GetLottoGroupByPayload<T extends LottoGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<LottoGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof LottoGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], LottoGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], LottoGroupByOutputType[P]>
      }
    >
  > 



export type LottoWhereInput = {
  AND?: Prisma.LottoWhereInput | Prisma.LottoWhereInput[]
  OR?: Prisma.LottoWhereInput[]
  NOT?: Prisma.LottoWhereInput | Prisma.LottoWhereInput[]
  id?: Prisma.IntFilter<"Lotto"> | number
  date?: Prisma.DateTimeFilter<"Lotto"> | Date | string
  num1?: Prisma.IntFilter<"Lotto"> | number
  num2?: Prisma.IntFilter<"Lotto"> | number
  num3?: Prisma.IntFilter<"Lotto"> | number
  num4?: Prisma.IntFilter<"Lotto"> | number
  num5?: Prisma.IntFilter<"Lotto"> | number
  num6?: Prisma.IntFilter<"Lotto"> | number
  bonus?: Prisma.IntFilter<"Lotto"> | number
}

export type LottoOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  date?: Prisma.SortOrder
  num1?: Prisma.SortOrder
  num2?: Prisma.SortOrder
  num3?: Prisma.SortOrder
  num4?: Prisma.SortOrder
  num5?: Prisma.SortOrder
  num6?: Prisma.SortOrder
  bonus?: Prisma.SortOrder
}

export type LottoWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  date?: Date | string
  AND?: Prisma.LottoWhereInput | Prisma.LottoWhereInput[]
  OR?: Prisma.LottoWhereInput[]
  NOT?: Prisma.LottoWhereInput | Prisma.LottoWhereInput[]
  num1?: Prisma.IntFilter<"Lotto"> | number
  num2?: Prisma.IntFilter<"Lotto"> | number
  num3?: Prisma.IntFilter<"Lotto"> | number
  num4?: Prisma.IntFilter<"Lotto"> | number
  num5?: Prisma.IntFilter<"Lotto"> | number
  num6?: Prisma.IntFilter<"Lotto"> | number
  bonus?: Prisma.IntFilter<"Lotto"> | number
}, "id" | "date">

export type LottoOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  date?: Prisma.SortOrder
  num1?: Prisma.SortOrder
  num2?: Prisma.SortOrder
  num3?: Prisma.SortOrder
  num4?: Prisma.SortOrder
  num5?: Prisma.SortOrder
  num6?: Prisma.SortOrder
  bonus?: Prisma.SortOrder
  _count?: Prisma.LottoCountOrderByAggregateInput
  _avg?: Prisma.LottoAvgOrderByAggregateInput
  _max?: Prisma.LottoMaxOrderByAggregateInput
  _min?: Prisma.LottoMinOrderByAggregateInput
  _sum?: Prisma.LottoSumOrderByAggregateInput
}

export type LottoScalarWhereWithAggregatesInput = {
  AND?: Prisma.LottoScalarWhereWithAggregatesInput | Prisma.LottoScalarWhereWithAggregatesInput[]
  OR?: Prisma.LottoScalarWhereWithAggregatesInput[]
  NOT?: Prisma.LottoScalarWhereWithAggregatesInput | Prisma.LottoScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Lotto"> | number
  date?: Prisma.DateTimeWithAggregatesFilter<"Lotto"> | Date | string
  num1?: Prisma.IntWithAggregatesFilter<"Lotto"> | number
  num2?: Prisma.IntWithAggregatesFilter<"Lotto"> | number
  num3?: Prisma.IntWithAggregatesFilter<"Lotto"> | number
  num4?: Prisma.IntWithAggregatesFilter<"Lotto"> | number
  num5?: Prisma.IntWithAggregatesFilter<"Lotto"> | number
  num6?: Prisma.IntWithAggregatesFilter<"Lotto"> | number
  bonus?: Prisma.IntWithAggregatesFilter<"Lotto"> | number
}

export type LottoCreateInput = {
  date: Date | string
  num1: number
  num2: number
  num3: number
  num4: number
  num5: number
  num6: number
  bonus: number
}

export type LottoUncheckedCreateInput = {
  id?: number
  date: Date | string
  num1: number
  num2: number
  num3: number
  num4: number
  num5: number
  num6: number
  bonus: number
}

export type LottoUpdateInput = {
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  num1?: Prisma.IntFieldUpdateOperationsInput | number
  num2?: Prisma.IntFieldUpdateOperationsInput | number
  num3?: Prisma.IntFieldUpdateOperationsInput | number
  num4?: Prisma.IntFieldUpdateOperationsInput | number
  num5?: Prisma.IntFieldUpdateOperationsInput | number
  num6?: Prisma.IntFieldUpdateOperationsInput | number
  bonus?: Prisma.IntFieldUpdateOperationsInput | number
}

export type LottoUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  num1?: Prisma.IntFieldUpdateOperationsInput | number
  num2?: Prisma.IntFieldUpdateOperationsInput | number
  num3?: Prisma.IntFieldUpdateOperationsInput | number
  num4?: Prisma.IntFieldUpdateOperationsInput | number
  num5?: Prisma.IntFieldUpdateOperationsInput | number
  num6?: Prisma.IntFieldUpdateOperationsInput | number
  bonus?: Prisma.IntFieldUpdateOperationsInput | number
}

export type LottoCreateManyInput = {
  id?: number
  date: Date | string
  num1: number
  num2: number
  num3: number
  num4: number
  num5: number
  num6: number
  bonus: number
}

export type LottoUpdateManyMutationInput = {
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  num1?: Prisma.IntFieldUpdateOperationsInput | number
  num2?: Prisma.IntFieldUpdateOperationsInput | number
  num3?: Prisma.IntFieldUpdateOperationsInput | number
  num4?: Prisma.IntFieldUpdateOperationsInput | number
  num5?: Prisma.IntFieldUpdateOperationsInput | number
  num6?: Prisma.IntFieldUpdateOperationsInput | number
  bonus?: Prisma.IntFieldUpdateOperationsInput | number
}

export type LottoUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  num1?: Prisma.IntFieldUpdateOperationsInput | number
  num2?: Prisma.IntFieldUpdateOperationsInput | number
  num3?: Prisma.IntFieldUpdateOperationsInput | number
  num4?: Prisma.IntFieldUpdateOperationsInput | number
  num5?: Prisma.IntFieldUpdateOperationsInput | number
  num6?: Prisma.IntFieldUpdateOperationsInput | number
  bonus?: Prisma.IntFieldUpdateOperationsInput | number
}

export type LottoCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  date?: Prisma.SortOrder
  num1?: Prisma.SortOrder
  num2?: Prisma.SortOrder
  num3?: Prisma.SortOrder
  num4?: Prisma.SortOrder
  num5?: Prisma.SortOrder
  num6?: Prisma.SortOrder
  bonus?: Prisma.SortOrder
}

export type LottoAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  num1?: Prisma.SortOrder
  num2?: Prisma.SortOrder
  num3?: Prisma.SortOrder
  num4?: Prisma.SortOrder
  num5?: Prisma.SortOrder
  num6?: Prisma.SortOrder
  bonus?: Prisma.SortOrder
}

export type LottoMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  date?: Prisma.SortOrder
  num1?: Prisma.SortOrder
  num2?: Prisma.SortOrder
  num3?: Prisma.SortOrder
  num4?: Prisma.SortOrder
  num5?: Prisma.SortOrder
  num6?: Prisma.SortOrder
  bonus?: Prisma.SortOrder
}

export type LottoMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  date?: Prisma.SortOrder
  num1?: Prisma.SortOrder
  num2?: Prisma.SortOrder
  num3?: Prisma.SortOrder
  num4?: Prisma.SortOrder
  num5?: Prisma.SortOrder
  num6?: Prisma.SortOrder
  bonus?: Prisma.SortOrder
}

export type LottoSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  num1?: Prisma.SortOrder
  num2?: Prisma.SortOrder
  num3?: Prisma.SortOrder
  num4?: Prisma.SortOrder
  num5?: Prisma.SortOrder
  num6?: Prisma.SortOrder
  bonus?: Prisma.SortOrder
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}



export type LottoSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  date?: boolean
  num1?: boolean
  num2?: boolean
  num3?: boolean
  num4?: boolean
  num5?: boolean
  num6?: boolean
  bonus?: boolean
}, ExtArgs["result"]["lotto"]>

export type LottoSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  date?: boolean
  num1?: boolean
  num2?: boolean
  num3?: boolean
  num4?: boolean
  num5?: boolean
  num6?: boolean
  bonus?: boolean
}, ExtArgs["result"]["lotto"]>

export type LottoSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  date?: boolean
  num1?: boolean
  num2?: boolean
  num3?: boolean
  num4?: boolean
  num5?: boolean
  num6?: boolean
  bonus?: boolean
}, ExtArgs["result"]["lotto"]>

export type LottoSelectScalar = {
  id?: boolean
  date?: boolean
  num1?: boolean
  num2?: boolean
  num3?: boolean
  num4?: boolean
  num5?: boolean
  num6?: boolean
  bonus?: boolean
}

export type LottoOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "date" | "num1" | "num2" | "num3" | "num4" | "num5" | "num6" | "bonus", ExtArgs["result"]["lotto"]>

export type $LottoPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Lotto"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    date: Date
    num1: number
    num2: number
    num3: number
    num4: number
    num5: number
    num6: number
    bonus: number
  }, ExtArgs["result"]["lotto"]>
  composites: {}
}

export type LottoGetPayload<S extends boolean | null | undefined | LottoDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$LottoPayload, S>

export type LottoCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<LottoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: LottoCountAggregateInputType | true
  }

export interface LottoDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Lotto'], meta: { name: 'Lotto' } }
  /**
   * Find zero or one Lotto that matches the filter.
   * @param {LottoFindUniqueArgs} args - Arguments to find a Lotto
   * @example
   * // Get one Lotto
   * const lotto = await prisma.lotto.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends LottoFindUniqueArgs>(args: Prisma.SelectSubset<T, LottoFindUniqueArgs<ExtArgs>>): Prisma.Prisma__LottoClient<runtime.Types.Result.GetResult<Prisma.$LottoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Lotto that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {LottoFindUniqueOrThrowArgs} args - Arguments to find a Lotto
   * @example
   * // Get one Lotto
   * const lotto = await prisma.lotto.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends LottoFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, LottoFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__LottoClient<runtime.Types.Result.GetResult<Prisma.$LottoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Lotto that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LottoFindFirstArgs} args - Arguments to find a Lotto
   * @example
   * // Get one Lotto
   * const lotto = await prisma.lotto.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends LottoFindFirstArgs>(args?: Prisma.SelectSubset<T, LottoFindFirstArgs<ExtArgs>>): Prisma.Prisma__LottoClient<runtime.Types.Result.GetResult<Prisma.$LottoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Lotto that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LottoFindFirstOrThrowArgs} args - Arguments to find a Lotto
   * @example
   * // Get one Lotto
   * const lotto = await prisma.lotto.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends LottoFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, LottoFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__LottoClient<runtime.Types.Result.GetResult<Prisma.$LottoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Lottos that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LottoFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Lottos
   * const lottos = await prisma.lotto.findMany()
   * 
   * // Get first 10 Lottos
   * const lottos = await prisma.lotto.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const lottoWithIdOnly = await prisma.lotto.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends LottoFindManyArgs>(args?: Prisma.SelectSubset<T, LottoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LottoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Lotto.
   * @param {LottoCreateArgs} args - Arguments to create a Lotto.
   * @example
   * // Create one Lotto
   * const Lotto = await prisma.lotto.create({
   *   data: {
   *     // ... data to create a Lotto
   *   }
   * })
   * 
   */
  create<T extends LottoCreateArgs>(args: Prisma.SelectSubset<T, LottoCreateArgs<ExtArgs>>): Prisma.Prisma__LottoClient<runtime.Types.Result.GetResult<Prisma.$LottoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Lottos.
   * @param {LottoCreateManyArgs} args - Arguments to create many Lottos.
   * @example
   * // Create many Lottos
   * const lotto = await prisma.lotto.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends LottoCreateManyArgs>(args?: Prisma.SelectSubset<T, LottoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Lottos and returns the data saved in the database.
   * @param {LottoCreateManyAndReturnArgs} args - Arguments to create many Lottos.
   * @example
   * // Create many Lottos
   * const lotto = await prisma.lotto.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Lottos and only return the `id`
   * const lottoWithIdOnly = await prisma.lotto.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends LottoCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, LottoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LottoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Lotto.
   * @param {LottoDeleteArgs} args - Arguments to delete one Lotto.
   * @example
   * // Delete one Lotto
   * const Lotto = await prisma.lotto.delete({
   *   where: {
   *     // ... filter to delete one Lotto
   *   }
   * })
   * 
   */
  delete<T extends LottoDeleteArgs>(args: Prisma.SelectSubset<T, LottoDeleteArgs<ExtArgs>>): Prisma.Prisma__LottoClient<runtime.Types.Result.GetResult<Prisma.$LottoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Lotto.
   * @param {LottoUpdateArgs} args - Arguments to update one Lotto.
   * @example
   * // Update one Lotto
   * const lotto = await prisma.lotto.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends LottoUpdateArgs>(args: Prisma.SelectSubset<T, LottoUpdateArgs<ExtArgs>>): Prisma.Prisma__LottoClient<runtime.Types.Result.GetResult<Prisma.$LottoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Lottos.
   * @param {LottoDeleteManyArgs} args - Arguments to filter Lottos to delete.
   * @example
   * // Delete a few Lottos
   * const { count } = await prisma.lotto.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends LottoDeleteManyArgs>(args?: Prisma.SelectSubset<T, LottoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Lottos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LottoUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Lottos
   * const lotto = await prisma.lotto.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends LottoUpdateManyArgs>(args: Prisma.SelectSubset<T, LottoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Lottos and returns the data updated in the database.
   * @param {LottoUpdateManyAndReturnArgs} args - Arguments to update many Lottos.
   * @example
   * // Update many Lottos
   * const lotto = await prisma.lotto.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Lottos and only return the `id`
   * const lottoWithIdOnly = await prisma.lotto.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends LottoUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, LottoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LottoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Lotto.
   * @param {LottoUpsertArgs} args - Arguments to update or create a Lotto.
   * @example
   * // Update or create a Lotto
   * const lotto = await prisma.lotto.upsert({
   *   create: {
   *     // ... data to create a Lotto
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Lotto we want to update
   *   }
   * })
   */
  upsert<T extends LottoUpsertArgs>(args: Prisma.SelectSubset<T, LottoUpsertArgs<ExtArgs>>): Prisma.Prisma__LottoClient<runtime.Types.Result.GetResult<Prisma.$LottoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Lottos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LottoCountArgs} args - Arguments to filter Lottos to count.
   * @example
   * // Count the number of Lottos
   * const count = await prisma.lotto.count({
   *   where: {
   *     // ... the filter for the Lottos we want to count
   *   }
   * })
  **/
  count<T extends LottoCountArgs>(
    args?: Prisma.Subset<T, LottoCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], LottoCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Lotto.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LottoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends LottoAggregateArgs>(args: Prisma.Subset<T, LottoAggregateArgs>): Prisma.PrismaPromise<GetLottoAggregateType<T>>

  /**
   * Group by Lotto.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LottoGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends LottoGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: LottoGroupByArgs['orderBy'] }
      : { orderBy?: LottoGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, LottoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLottoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Lotto model
 */
readonly fields: LottoFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Lotto.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__LottoClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Lotto model
 */
export interface LottoFieldRefs {
  readonly id: Prisma.FieldRef<"Lotto", 'Int'>
  readonly date: Prisma.FieldRef<"Lotto", 'DateTime'>
  readonly num1: Prisma.FieldRef<"Lotto", 'Int'>
  readonly num2: Prisma.FieldRef<"Lotto", 'Int'>
  readonly num3: Prisma.FieldRef<"Lotto", 'Int'>
  readonly num4: Prisma.FieldRef<"Lotto", 'Int'>
  readonly num5: Prisma.FieldRef<"Lotto", 'Int'>
  readonly num6: Prisma.FieldRef<"Lotto", 'Int'>
  readonly bonus: Prisma.FieldRef<"Lotto", 'Int'>
}
    

// Custom InputTypes
/**
 * Lotto findUnique
 */
export type LottoFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lotto
   */
  select?: Prisma.LottoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lotto
   */
  omit?: Prisma.LottoOmit<ExtArgs> | null
  /**
   * Filter, which Lotto to fetch.
   */
  where: Prisma.LottoWhereUniqueInput
}

/**
 * Lotto findUniqueOrThrow
 */
export type LottoFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lotto
   */
  select?: Prisma.LottoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lotto
   */
  omit?: Prisma.LottoOmit<ExtArgs> | null
  /**
   * Filter, which Lotto to fetch.
   */
  where: Prisma.LottoWhereUniqueInput
}

/**
 * Lotto findFirst
 */
export type LottoFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lotto
   */
  select?: Prisma.LottoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lotto
   */
  omit?: Prisma.LottoOmit<ExtArgs> | null
  /**
   * Filter, which Lotto to fetch.
   */
  where?: Prisma.LottoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Lottos to fetch.
   */
  orderBy?: Prisma.LottoOrderByWithRelationInput | Prisma.LottoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Lottos.
   */
  cursor?: Prisma.LottoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Lottos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Lottos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Lottos.
   */
  distinct?: Prisma.LottoScalarFieldEnum | Prisma.LottoScalarFieldEnum[]
}

/**
 * Lotto findFirstOrThrow
 */
export type LottoFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lotto
   */
  select?: Prisma.LottoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lotto
   */
  omit?: Prisma.LottoOmit<ExtArgs> | null
  /**
   * Filter, which Lotto to fetch.
   */
  where?: Prisma.LottoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Lottos to fetch.
   */
  orderBy?: Prisma.LottoOrderByWithRelationInput | Prisma.LottoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Lottos.
   */
  cursor?: Prisma.LottoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Lottos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Lottos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Lottos.
   */
  distinct?: Prisma.LottoScalarFieldEnum | Prisma.LottoScalarFieldEnum[]
}

/**
 * Lotto findMany
 */
export type LottoFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lotto
   */
  select?: Prisma.LottoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lotto
   */
  omit?: Prisma.LottoOmit<ExtArgs> | null
  /**
   * Filter, which Lottos to fetch.
   */
  where?: Prisma.LottoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Lottos to fetch.
   */
  orderBy?: Prisma.LottoOrderByWithRelationInput | Prisma.LottoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Lottos.
   */
  cursor?: Prisma.LottoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Lottos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Lottos.
   */
  skip?: number
  distinct?: Prisma.LottoScalarFieldEnum | Prisma.LottoScalarFieldEnum[]
}

/**
 * Lotto create
 */
export type LottoCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lotto
   */
  select?: Prisma.LottoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lotto
   */
  omit?: Prisma.LottoOmit<ExtArgs> | null
  /**
   * The data needed to create a Lotto.
   */
  data: Prisma.XOR<Prisma.LottoCreateInput, Prisma.LottoUncheckedCreateInput>
}

/**
 * Lotto createMany
 */
export type LottoCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Lottos.
   */
  data: Prisma.LottoCreateManyInput | Prisma.LottoCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Lotto createManyAndReturn
 */
export type LottoCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lotto
   */
  select?: Prisma.LottoSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Lotto
   */
  omit?: Prisma.LottoOmit<ExtArgs> | null
  /**
   * The data used to create many Lottos.
   */
  data: Prisma.LottoCreateManyInput | Prisma.LottoCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Lotto update
 */
export type LottoUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lotto
   */
  select?: Prisma.LottoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lotto
   */
  omit?: Prisma.LottoOmit<ExtArgs> | null
  /**
   * The data needed to update a Lotto.
   */
  data: Prisma.XOR<Prisma.LottoUpdateInput, Prisma.LottoUncheckedUpdateInput>
  /**
   * Choose, which Lotto to update.
   */
  where: Prisma.LottoWhereUniqueInput
}

/**
 * Lotto updateMany
 */
export type LottoUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Lottos.
   */
  data: Prisma.XOR<Prisma.LottoUpdateManyMutationInput, Prisma.LottoUncheckedUpdateManyInput>
  /**
   * Filter which Lottos to update
   */
  where?: Prisma.LottoWhereInput
  /**
   * Limit how many Lottos to update.
   */
  limit?: number
}

/**
 * Lotto updateManyAndReturn
 */
export type LottoUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lotto
   */
  select?: Prisma.LottoSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Lotto
   */
  omit?: Prisma.LottoOmit<ExtArgs> | null
  /**
   * The data used to update Lottos.
   */
  data: Prisma.XOR<Prisma.LottoUpdateManyMutationInput, Prisma.LottoUncheckedUpdateManyInput>
  /**
   * Filter which Lottos to update
   */
  where?: Prisma.LottoWhereInput
  /**
   * Limit how many Lottos to update.
   */
  limit?: number
}

/**
 * Lotto upsert
 */
export type LottoUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lotto
   */
  select?: Prisma.LottoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lotto
   */
  omit?: Prisma.LottoOmit<ExtArgs> | null
  /**
   * The filter to search for the Lotto to update in case it exists.
   */
  where: Prisma.LottoWhereUniqueInput
  /**
   * In case the Lotto found by the `where` argument doesn't exist, create a new Lotto with this data.
   */
  create: Prisma.XOR<Prisma.LottoCreateInput, Prisma.LottoUncheckedCreateInput>
  /**
   * In case the Lotto was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.LottoUpdateInput, Prisma.LottoUncheckedUpdateInput>
}

/**
 * Lotto delete
 */
export type LottoDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lotto
   */
  select?: Prisma.LottoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lotto
   */
  omit?: Prisma.LottoOmit<ExtArgs> | null
  /**
   * Filter which Lotto to delete.
   */
  where: Prisma.LottoWhereUniqueInput
}

/**
 * Lotto deleteMany
 */
export type LottoDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Lottos to delete
   */
  where?: Prisma.LottoWhereInput
  /**
   * Limit how many Lottos to delete.
   */
  limit?: number
}

/**
 * Lotto without action
 */
export type LottoDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lotto
   */
  select?: Prisma.LottoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lotto
   */
  omit?: Prisma.LottoOmit<ExtArgs> | null
}
